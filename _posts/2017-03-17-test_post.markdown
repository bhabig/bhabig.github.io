---
layout: post
title:  "Rails Got Real"
date:   2017-03-17 13:04:03 -0400
---


For my rails assessment project, I undertook an interactive recipe index app. I wanted to focus on a few things I felt were weaknesses as I was learning the content for this section: validations and complex nested forms. This task was certainly not easy.

The validations for my user and recipe were far above and beyond what I had imagined I'd do for this project, but for the sake of growth and practice, I decided to let myself get carried away. In the long run it was not nearly as hard as I'd imagined, however figuring out how to properly render the errors did become a tedious and difficult endeavor. A big reason for this is due to the fact that I attempted some CSS / Bootstrap for the first time in this lab as well, and getting the content to sit nicely and neatly was a bit challenging. Although the styling became quite tedious and time consuming, it was extremely beneficial in the long run for me and I'm very glad I gave it a shot!

The nested forms were another story. The original readme for this project required a join table that has its own unique attribute as well as the id's of the 2 joined tables. This was a MONUMENTALLY CHALLENGING task. It not only pushed my knowledge of `fields_for` and the structure of nested forms in general, it also really pushed me past my comfort zone with whitelisting attributes for an object class. I was unable to whitelist the complex form result that I had to create to properly associate this join table attribute with its corresponding ingredient (1 or 2 joined tables, the other being recipe, the form this nested ingredient form was on). Because of this whitelisting failure, I had to really dive into custom validation and sanitization. This may be bad practice in the long run, but it pushed my knowledge of how the create action works alongside strong params, as far as timing of method calls, etc. and it also pushed my coding logic and general ruby skills to make this work. The `measurement` attribute from the join needed to be as if it were actually an attribute of the ingredient itself, so when strong params called my custom attributes setter method for the recipe, it not only had to create the recipe, ingredient, and join object, but it had to specifically pair the `measurement` with the proper ingredient. This became tricky when certain ingredient fields were left blank. In the long run, I built code that effectively sanitized user input, paired the ingredient with the measurement attribute, and attached them to the correct recipe.

This was the most challenging thing I have undergone in programming. I do not wish to do it again, there is surely a more conventional and condoned way, but I was able to take a VERY difficult goal and make it a reality, and for that, I am very proud.
